type Query {
    "Search for a singular record using it's ID"
    metadataById(id: ID!) : [Metadata]
    """Search by Query"""
    metadataByQuery(
        """ Query string to use in general full-text search """
        query: String,
        """ List of identifiers to return """
        ids: [String],
        """ List of aggregations to return """
        aggs: [String],
        """ The record offset from the first result (starting from 0) """
        from: Int,
        """ The number of results to return """
        size: Int,
        """ Queries that target specific fields
        Takes the following form:
        "field_1:query_1;field_2:query_2;...;field_n:query_n",
        "where each `field_x` is the name of a searchable field/facet and each `query_x` is a search query string that can be simple text or contain Lucene syntax."""
        field: String,
        """ Filters to be applied to the query,
                  Takes the following form:,
                  "filter_1:((value_1),(value_2),...,(value_n));filter_2:(value_i,value_ii,...,value_m)",
                  where each `filter_x` is the name of a searchable field/facet and each `value_y` is a value for that facet.,
                  Filters are combined with logical **AND** between different facets and logical **OR** between different values within the same facet.,
                  Note that the inner parentheses that enclose individual filter values are usually optional but must be used where the value contains a comma. """
        filter: String,
        """ Sort clauses used to order search results e.g:
        "sort_1:direction_1,sort_2:direction_2,...,sort_n:direction_n",
        where each `sort_x` is the name of a searchable field/facet and each `direction_x` can be either 'asc' or 'desc' for ascending and descending order, respectively."""
        sort: String): [Metadata]
}

type TypedValue {
    primary: Boolean
    value: String
    type: String
}

type Enrichment {
    value: String
    url: String
}

type Measurement{
    dimension: String
    value: String
}

type Metadata{
    id: String
    title: String
    identifier: [TypedValue]
    name: [String]
    description: [String]
    datatype: String
    maker: [String]
    parent: [Metadata]
    children(query: String, ids: [String],from: Int, size: Int, field: String, filter: String, sort: String): [Metadata]
    enrichment_location: [Enrichment]
    enrichment_date: [String]
    enrichment_misc: [Enrichment]
    enrichment_org: [Enrichment]
    enrichment_person: [Enrichment]
    repository: String
    subject: [String]
    level: String
    hierarchy(query: String, from: Int, size: Int, field: String, filter: String, sort: String): [Metadata]
    community: [Metadata]
    institution: [String]
    legal: String
    organisation: String
    place: String
    creation_date: String
    collection: [Metadata]
    collectionMorrab: [Metadata]
    collectionSurrey: [Metadata]
    colour: String
    condition: String
    coordinates_lat: String
    coordinates_lon: String
    copies: String
    publisher: String
    inscription: [String]
    legal_holder: String
    licence: String
    measurements: [Measurement]
    place_hierarchy: String
    provenance: String
    related_material: String
}