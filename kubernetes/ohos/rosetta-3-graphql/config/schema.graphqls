type Query {
    "Search for a singular record using it's ID"
    metadataById(id: ID!) : [Metadata]
    """Search by Query"""
    metadataByQuery(
        """ Query string to use in general full-text search """
        query: String,
        """ List of identifiers to return """
        ids: [String],
        """ List of aggregations to return """
        aggs: [String],
        """ The record offset from the first result (starting from 0) """
        from: Int,
        """ The number of results to return """
        size: Int,
        """ Queries that target specific fields
        Takes the following form:
        "field_1:query_1;field_2:query_2;...;field_n:query_n",
        "where each `field_x` is the name of a searchable field/facet and each `query_x` is a search query string that can be simple text or contain Lucene syntax."""
        field: String,
        """ Filters to be applied to the query,
                  Takes the following form:,
                  "filter_1:((value_1),(value_2),...,(value_n));filter_2:(value_i,value_ii,...,value_m)",
                  where each `filter_x` is the name of a searchable field/facet and each `value_y` is a value for that facet.,
                  Filters are combined with logical **AND** between different facets and logical **OR** between different values within the same facet.,
                  Note that the inner parentheses that enclose individual filter values are usually optional but must be used where the value contains a comma. """
        filter: String,
        """ Sort clauses used to order search results e.g:
        "sort_1:direction_1,sort_2:direction_2,...,sort_n:direction_n",
        where each `sort_x` is the name of a searchable field/facet and each `direction_x` can be either 'asc' or 'desc' for ascending and descending order, respectively."""
        sort: String): [Metadata]
}

type TypedValue {
    value: String
    type: String
}

type Enrichment {
    value: String
    url: String
}

type Measurement{
    dimension: String
    value: String
}

type Metadata{
    """The project ID created for the item"""
    admin_ID: String
    """The title of the item"""
    title: String
    """The identifier created by the Community Archive"""
    community_identifier: [TypedValue]
    """The format of the item, for example photo"""
    format: [String]
    """The description of the item"""
    description: [String]
    """The creator of the item"""
    creator: [String]
    """The project ID for the parent record of the item"""
    parent_record_ID: [Metadata]
    """The project ID for the child record of the item"""
    child_record_ID(query: String, ids: [String],from: Int, size: Int, field: String, filter: String, sort: String): [Metadata]
    """Location identified via Named Entity Recognition"""
    location_named_entity: [Enrichment]
    """Date identified via Named Entity Recognition"""
    date_named_entity: [String]
    """Miscellaneous entity identified via Named Entity Recognition"""
    miscellaneous_named_entity: [Enrichment]
    """Organisation identified via Named Entity Recognition"""
    organisation_named_entity: [Enrichment]
    """Person identified via Named Entity Recognition"""
    person_named_entity: [Enrichment]
    """The institution where the item is held"""
    place_of_deposit: String
    """Subject associated with the item on the community archive website"""
    subject: [String]
    """The archival level of the item (e.g. collection, series, item)"""
    level: String
    """The project IDs of the records that are above this item in the Community Archiveâ€™s hierarchy"""
    item_hierarchy(query: String, from: Int, size: Int, field: String, filter: String, sort: String): [Metadata]
    """The project ID of the Community Archive"""
    community_archive_ID: [Metadata]
    """The owner of the item"""
    owner: [String]
    """Rights asserted in the item"""
    rights: String
    """The Community Archive that holds the item"""
    community_archive: String
    """A location associated with the item"""
    location: String
    """The date associated with the item, often when the item was created"""
    date: String
    """Notes on whether the item is in full colour or monochrome"""
    colour: String
    """Information on the condition of the original object"""
    condition: String
    """Latitude co-ordinate associated with the item"""
    latitude: String
    """Longitude co-ordinate associated with the item"""
    longitude: String
    """Information on the number of copies available of the item"""
    copies: String
    """The publisher of the item"""
    publisher: String
    """Inscription recorded on the original item"""
    inscription: [String]
    """The person or institution who holds the rights in the item"""
    rights_holder: String
    """Details of the licence applied to the item"""
    licence: String
    """Information on the measurement or amount of the item"""
    extent: [Measurement]
    """A location associated with the item"""
    location_hierarchy: String
    """Information on the provenance of the item"""
    provenance: String
}